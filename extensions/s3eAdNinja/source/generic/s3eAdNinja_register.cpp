/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eAdNinja_autodefs.h"
#include "s3eEdk.h"
#include "s3eAdNinja.h"
//Declarations of Init and Term functions
extern s3eResult s3eAdNinjaInit();
extern void s3eAdNinjaTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult s3eAdNinjaStart_wrap(const char* appKey)
{
    IwTrace(ADNINJA_VERBOSE, ("calling s3eAdNinja func on main thread: s3eAdNinjaStart"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdNinjaStart, 1, appKey);
}

static s3eResult s3eAdNinjaRequestFreshAd_wrap()
{
    IwTrace(ADNINJA_VERBOSE, ("calling s3eAdNinja func on main thread: s3eAdNinjaRequestFreshAd"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdNinjaRequestFreshAd, 0);
}

static s3eResult s3eAdNinjaShow_wrap()
{
    IwTrace(ADNINJA_VERBOSE, ("calling s3eAdNinja func on main thread: s3eAdNinjaShow"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdNinjaShow, 0);
}

static s3eResult s3eAdNinjaHide_wrap()
{
    IwTrace(ADNINJA_VERBOSE, ("calling s3eAdNinja func on main thread: s3eAdNinjaHide"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdNinjaHide, 0);
}

#define s3eAdNinjaStart s3eAdNinjaStart_wrap
#define s3eAdNinjaRequestFreshAd s3eAdNinjaRequestFreshAd_wrap
#define s3eAdNinjaShow s3eAdNinjaShow_wrap
#define s3eAdNinjaHide s3eAdNinjaHide_wrap

#endif

s3eResult s3eAdNinjaRegister(s3eAdNinjaCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_ADNINJA_HASH, S3E_ADNINJA_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eAdNinjaUnRegister(s3eAdNinjaCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_ADNINJA_HASH, S3E_ADNINJA_CALLBACK_MAX, cbid, fn);
}

void s3eAdNinjaRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[6];
    funcPtrs[0] = (void*)s3eAdNinjaRegister;
    funcPtrs[1] = (void*)s3eAdNinjaUnRegister;
    funcPtrs[2] = (void*)s3eAdNinjaStart;
    funcPtrs[3] = (void*)s3eAdNinjaRequestFreshAd;
    funcPtrs[4] = (void*)s3eAdNinjaShow;
    funcPtrs[5] = (void*)s3eAdNinjaHide;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[6] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eAdNinja", funcPtrs, sizeof(funcPtrs), flags, s3eAdNinjaInit, s3eAdNinjaTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eAdNinjaStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eAdNinjaRegisterExt;
    return 0;
}

int g_s3eAdNinjaVal = s3eAdNinjaStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eAdNinjaRegisterExt();
}
#endif

#endif
